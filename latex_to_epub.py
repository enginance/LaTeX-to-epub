#!/usr/bin/env python3
# ╔════════════════════════════════════════════════════════════╗
# ║     LaTeX to EPUB Converter using Pandoc + Python         ║
# ║     Author: enginance                                     ║
# ║     Description: Converts a LaTeX file to EPUB using       ║
# ║     Pandoc with enhanced features for EPUB conversion.    ║
# ║     Notes:                                                ║
# ║      - Requires Pandoc ≥ 2.11                             ║
# ║      - Make sure all \input or \include files exist         ║
# ║      - Figures, tables, formulas, and citations should be   ║
# ║        handled more robustly. Table of contents will be    ║
# ║        automatically generated by Pandoc.                  ║
# ╚════════════════════════════════════════════════════════════╝

import subprocess  # For running Pandoc commands
import sys          # For accessing system-specific parameters and functions
from pathlib import Path # For working with file paths
import os           # For interacting with the operating system (e.g., checking file existence)

# ----------------------------------------------------------------------
#  Function: convert_latex_to_epub
#  Description: Converts a LaTeX file to an EPUB using Pandoc.
# ----------------------------------------------------------------------
def convert_latex_to_epub(source_file: str, target_file: str, bibliography_file: str = None):
    """
    Converts a LaTeX source file to an EPUB using Pandoc with enhanced options
    for better handling of various LaTeX elements.

    Args:
        source_file (str): Path to the LaTeX (.tex) file.
        target_file (str): Desired output EPUB file.
        bibliography_file (str, optional): Path to the BibTeX (.bib) file.
                                           Defaults to None.
    """

    print("╔══════════════════════════════════════════════════╗")
    print("║  LaTeX to EPUB Conversion Process Started       ║")
    print("╚══════════════════════════════════════════════════╝")

    # ----------------------------------------------------------
    # 1. Input File Validation
    # ----------------------------------------------------------
    print("\n[SECTION 1] Input File Validation")
    if not Path(source_file).is_file():
        print(f"❌ Error: Source file not found: {source_file}", file=sys.stderr)
        sys.exit(1)
    print(f"✅ Source file found: {source_file}")

    # ----------------------------------------------------------
    # 2. Construct Pandoc Command
    # ----------------------------------------------------------
    print("\n[SECTION 2] Constructing Pandoc Command")
    pandoc_command = [
        "pandoc",
        "-s",  # Standalone output (creates a complete EPUB)
        source_file,
        "-o",
        target_file,
        "--to",
        "epub",
        "--toc",  # Generate table of contents
        "--number-sections", # Add this line
        "--epub-metadata",
        "metadata.xml",  # Use a metadata file for EPUB metadata
        "--wrap=preserve", # Preserve line breaks within paragraphs
        #"--lua-filter=latex-to-unicode.lua" # Use Lua filter for better Unicode handling - Removed from base command
    ]
    print(f"   Base Pandoc command: {' '.join(pandoc_command[:5])} ...") # Print the start of the command

    # ----------------------------------------------------------
    # 3. Handle Bibliography (Optional)
    # ----------------------------------------------------------
    if bibliography_file:
        print("\n[SECTION 3] Handling Bibliography")
        if not Path(bibliography_file).is_file():
            print(f"⚠️ Warning: Bibliography file not found: {bibliography_file}", file=sys.stderr)
        else:
            pandoc_command.extend(["--bibliography", bibliography_file, "--citeproc"])
            print("   Bibliography file provided.  Enabling citation processing...")
    else:
        print("\n[SECTION 3] Handling Bibliography")
        print("   No bibliography file provided. Citations will be rendered directly (if present).")

    # ----------------------------------------------------------
    # 4. Handle Figures and Formulas
    # ----------------------------------------------------------
    print("\n[SECTION 4] Handling Figures and Formulas")
    print("   Figures: Pandoc will attempt to convert figures using \\includegraphics.")
    print("            Complex figures may require manual adjustment.")
    pandoc_command.append("--mathml") # Use MathML for formulas in EPUB
    print("   Formulas: Converting LaTeX formulas to MathML for better EPUB compatibility.")

    # ----------------------------------------------------------
    # 5. Handle Lua Filter (Optional)
    # ----------------------------------------------------------
    print("\n[SECTION 5] Handling Lua Filter")
    lua_filter_file = "latex-to-unicode.lua"
    if Path(lua_filter_file).is_file():
        pandoc_command.extend(["--lua-filter", lua_filter_file])
        print(f"   Lua filter '{lua_filter_file}' found.  Enabling it for improved Unicode math handling.")
    else:
        print(f"   Lua filter '{lua_filter_file}' not found.  Continuing without it.")
        print("   Download the filter from https://raw.githubusercontent.com/jgm/pandoc-lua-filters/master/latex-to-unicode/latex-to-unicode.lua")
        print("   and place it in the same directory as this script for improved formula conversion.")

    # ----------------------------------------------------------
    # 6. Execute Pandoc
    # ----------------------------------------------------------
    print("\n[SECTION 6] Executing Pandoc Conversion")
    print(f"   Full Pandoc command: {' '.join(pandoc_command)}") # Print the entire command
    try:
        subprocess.run(pandoc_command, check=True)
        print(f"✅ Conversion complete: {target_file}")
    except subprocess.CalledProcessError as e:
        print("❌ Pandoc conversion failed.", file=sys.stderr)
        print(f"   Error details: {e}") # Print the error
        sys.exit(e.returncode)

    print("╚══════════════════════════════════════════════════╝")
    print("║  LaTeX to EPUB Conversion Process Finished        ║")
    print("╚══════════════════════════════════════════════════╝")

# ----------------------------------------------------------------------
#  Main Program
#  Description:  Sets up input/output files and calls the conversion function.
# ----------------------------------------------------------------------
if __name__ == "__main__":
    print("╔══════════════════════════════════════════════════╗")
    print("║          LaTeX to EPUB Converter                ║")
    print("║          Main Program Started                    ║")
    print("╚══════════════════════════════════════════════════╝")

    # ----------------------------------------------------------
    # 1. User Input (File Paths)
    # ----------------------------------------------------------
    print("\n[SECTION 1] User Input: Define File Paths")
    # ----------------------------------------------------------
    #  User Input Section
    # ----------------------------------------------------------
    SOURCE_FILE = "your_document.tex"          # 📝 Input LaTeX file
    TARGET_FILE = "your_ebook.epub"            # 📂 Output EPUB file
    BIBLIOGRAPHY_FILE = "references.bib"      # 📚 Bibliography file (or None)
    METADATA_FILE = "metadata.xml"             # 📄 EPUB metadata file
    # ----------------------------------------------------------
    # End User Input Section
    # ----------------------------------------------------------

    print("   Please modify the file paths below if necessary:")
    print(f"   - LaTeX Source File:     {SOURCE_FILE}")
    print(f"   - Output EPUB File:      {TARGET_FILE}")
    print(f"   - Bibliography File: {BIBLIOGRAPHY_FILE}")
    print(f"   - Metadata File:     {METADATA_FILE}")

    # ----------------------------------------------------------
    # 2. Create Metadata File (if it doesn't exist)
    # ----------------------------------------------------------
    print("\n[SECTION 2] Creating EPUB Metadata File (if needed)")
    if not Path(METADATA_FILE).is_file():
        print(f"   Metadata file '{METADATA_FILE}' not found. Creating a basic one.")
        with open(METADATA_FILE, "w", encoding="UTF-8") as f: # Specify UTF-8 encoding
            f.write("""<?xml version="1.0" encoding="UTF-8"?>
<package xmlns="http://www.idpf.org/2007/opf" version="3.0" xml:lang="en">
  <metadata xmlns:dc="http://purl.org/dc/elements/1.1/">
    <dc:title>Your Book Title</dc:title>
    <dc:creator>Your Name</dc:creator>
    <dc:publisher>Your Publisher</dc:publisher>
    <dc:date>2024-07-24</dc:date>
    <dc:language>en</dc:language>
    <dc:identifier id="BookId" scheme="UUID">urn:uuid:your-unique-id</dc:identifier>
  </metadata>
  <manifest>
    <item id="nav" href="nav.xhtml" properties="nav" media-type="application/xhtml+xml"/>
  </manifest>
  <spine toc="nav"/>
</package>
""")
        print(f"   A basic metadata file has been created at '{METADATA_FILE}'.")
        print("   Please edit this file to add the correct information for your book.")
    else:
        print(f"   Metadata file '{METADATA_FILE}' already exists.")

    # ----------------------------------------------------------
    # 3. Download Lua Filter (Optional) - Removed Download Attempt
    # ----------------------------------------------------------
    print("\n[SECTION 3] Checking for Lua Filter")
    lua_filter_file = "latex-to-unicode.lua"
    if not Path(lua_filter_file).is_file():
        print(f"   Lua filter '{lua_filter_file}' not found.")
        print("   Download the filter from https://raw.githubusercontent.com/jgm/pandoc-lua-filters/master/latex-to-unicode/latex-to-unicode.lua")
        print("   and place it in the same directory as this script for improved formula conversion.")
    else:
        print(f"   Lua filter '{lua_filter_file}' already exists.")

    # ----------------------------------------------------------
    # 4. Perform Conversion
    # ----------------------------------------------------------
    print("\n[SECTION 4] Performing LaTeX to EPUB Conversion")
    convert_latex_to_epub(SOURCE_FILE, TARGET_FILE, BIBLIOGRAPHY_FILE)

    print("╚══════════════════════════════════════════════════╝")
    print("║          Main Program Finished                     ║")
    print("╚══════════════════════════════════════════════════╝")
