#!/usr/bin/env python3
# ╔════════════════════════════════════════════════════════════╗
# ║        LaTeX Document Converter using Pandoc + Python      ║
# ║        Author: enginance                                   ║
# ║        Description: Converts a LaTeX file to EPUB or DOCX  ║
# ║                     with enhanced features.                ║
# ║        Notes:                                              ║
# ║          - Requires Pandoc ≥ 2.11                          ║
# ║          - Make sure all \input or \include files exist    ║
# ║          - Figures, tables, formulas, and citations should ║
# ║            be handled robustly. Table of contents will be  ║
# ║            automatically generated by Pandoc.              ║
# ║        Revision Log:                                       ║
# ║          - Added --css option for hyphenation (2025-06-22) ║
# ║          - Added --metadata references-title for bib title ║
# ║          - Made output format parametric (EPUB/DOCX)       ║
# ╚════════════════════════════════════════════════════════════╝

import subprocess  # For running Pandoc commands
import sys         # For accessing system-specific parameters and functions
from pathlib import Path # For working with file paths
import os          # For interacting with the operating system (e.g., checking file existence)
import uuid        # For generating unique identifiers (UUIDs)
from datetime import datetime # Added for current_date in metadata


# ----------------------------------------------------------------------
#  Function: convert_latex_document
#  Description: Converts a LaTeX file to a specified output format (EPUB/DOCX).
# ----------------------------------------------------------------------
def convert_latex_document(source_file: str, output_format: str, target_base_name: str,
                           bibliography_file: str = None, csl_file: str = None,
                           epub_metadata_file: str = None, epub_cover_image: str = None,
                           epub_custom_css: str = None, docx_reference_doc: str = None):
    """
    Converts a LaTeX source file to the specified output format (EPUB or DOCX)
    using Pandoc with enhanced options.

    Args:
        source_file (str): Path to the LaTeX (.tex) file.
        output_format (str): Desired output format ("epub" or "docx").
        target_base_name (str): Base name for the output file (e.g., "my_book").
                                The extension will be added automatically.
        bibliography_file (str, optional): Path to the BibTeX (.bib) file.
                                            Defaults to None.
        csl_file (str, optional): Path to the CSL (.csl) file for bibliography styling.
                                  Defaults to None (Pandoc's default style will be used).
        epub_metadata_file (str, optional): Path to the EPUB metadata XML file (for EPUB output only).
                                            Defaults to None.
        epub_cover_image (str, optional): Path to the cover image file (for EPUB output only).
                                          Defaults to None.
        epub_custom_css (str, optional): Path to a custom CSS file (for EPUB output only).
                                         Defaults to None.
        docx_reference_doc (str, optional): Path to a reference DOCX file for styling (for DOCX output only).
                                            Defaults to None.
    """

    print(f"╔══════════════════════════════════════════════════╗")
    print(f"║        LaTeX to {output_format.upper()} Conversion Process Started  ║")
    print(f"╚══════════════════════════════════════════════════╝")

    # Determine target file name with correct extension
    target_file = f"{target_base_name}.{output_format}"

    # ----------------------------------------------------------
    # 1. Input File Validation
    # ----------------------------------------------------------
    print("\n---")
    print("[SECTION 1] Input File Validation")
    print("---")
    if not Path(source_file).is_file():
        print(f"❌ Error: Source file not found: {source_file}", file=sys.stderr)
        sys.exit(1)
    print(f"✅ Source file found: {source_file}")

    # Validate format-specific files
    if output_format == "epub":
        if epub_cover_image and not Path(epub_cover_image).is_file():
            print(f"⚠️ Warning: EPUB cover image file not found: {epub_cover_image}. EPUB will be created without a cover image.", file=sys.stderr)
            epub_cover_image = None
        elif epub_cover_image:
            print(f"✅ EPUB cover image file found: {epub_cover_image}")

        if epub_custom_css and not Path(epub_custom_css).is_file():
            print(f"⚠️ Warning: EPUB custom CSS file not found: {epub_custom_css}. Continuing without custom styling.", file=sys.stderr)
            epub_custom_css = None
        elif epub_custom_css:
            print(f"✅ EPUB custom CSS file found: {epub_custom_css}")

    elif output_format == "docx":
        if docx_reference_doc and not Path(docx_reference_doc).is_file():
            print(f"⚠️ Warning: DOCX reference document not found: {docx_reference_doc}. DOCX will use Pandoc's default styles.", file=sys.stderr)
            docx_reference_doc = None
        elif docx_reference_doc:
            print(f"✅ DOCX reference document found: {docx_reference_doc}")
    else:
        print(f"❌ Error: Unsupported output format: {output_format}. Please choose 'epub' or 'docx'.", file=sys.stderr)
        sys.exit(1)

    # ----------------------------------------------------------
    # 2. Construct Pandoc Command
    # ----------------------------------------------------------
    print("\n---")
    print("[SECTION 2] Constructing Pandoc Command")
    print("---")
    pandoc_command = [
        "pandoc",
        "-s",  # Standalone output
        source_file,
        "-o",
        target_file,
        "--to", output_format,
        "--toc",          # Generate table of contents
        "--number-sections",   # Number sections
    ]
    print(f"    Base Pandoc command: {' '.join(pandoc_command[:5])} ...")

    # Add format-specific options
    if output_format == "epub":
        pandoc_command.extend([
            "--epub-metadata", epub_metadata_file,
            "--mathml", # Use MathML for formulas in EPUB
            "--metadata", "references-title=Bibliography", # For bibliography title in EPUB
        ])
        if epub_cover_image:
            pandoc_command.extend(["--epub-cover-image", epub_cover_image])
        if epub_custom_css:
            pandoc_command.extend(["--css", epub_custom_css])
    elif output_format == "docx":
        # Math is usually handled natively by Word conversion, no --mathml needed
        pandoc_command.extend([
            "--metadata", "references-title=Bibliography", # For bibliography title in DOCX
        ])
        if docx_reference_doc:
            pandoc_command.extend(["--reference-doc", docx_reference_doc])

    # ----------------------------------------------------------
    # 3. Handle Bibliography (Optional - applicable to both EPUB/DOCX)
    # ----------------------------------------------------------
    print("\n---")
    print("[SECTION 3] Handling Bibliography")
    print("---")
    if bibliography_file:
        if not Path(bibliography_file).is_file():
            print(f"⚠️ Warning: Bibliography file not found: {bibliography_file}. Citations will be unformatted.", file=sys.stderr)
        else:
            pandoc_command.extend(["--bibliography", bibliography_file, "--citeproc"])
            print(f"    Bibliography file '{bibliography_file}' found. Enabling citation processing...")
            # --- CSL FILE HANDLING ---
            if csl_file:
                if not Path(csl_file).is_file():
                    print(f"⚠️ Warning: CSL style file not found: {csl_file}. Using Pandoc's default citation style (often unnumbered).", file=sys.stderr)
                else:
                    pandoc_command.extend(["--csl", csl_file])
                    print(f"    Using CSL style file: {csl_file}")
            else:
                print("    No CSL file provided. Using Pandoc's default citation style (often unnumbered).")
            # --- END CSL FILE HANDLING ---
    else:
        print("    No bibliography file provided. Citations will be rendered directly (if present) without BibTeX processing.")

    # ----------------------------------------------------------
    # 4. Handle Figures and Formulas
    # ----------------------------------------------------------
    print("\n---")
    print("[SECTION 4] Handling Figures and Formulas")
    print("---")
    print("    Figures: Pandoc will attempt to convert figures using \\includegraphics.")
    print("             Complex figures or custom LaTeX figure environments may require manual adjustment or specific filters.")
    if output_format == "epub":
        print("    Formulas: Converting LaTeX formulas to MathML for better EPUB compatibility (using --mathml).")
    elif output_format == "docx":
        print("    Formulas: Converting LaTeX formulas to native Word equations (MathML) for editability.")

    # ----------------------------------------------------------
    # 5. Handle Lua Filter (Optional - generally useful for both)
    # ----------------------------------------------------------
    print("\n---")
    print("[SECTION 5] Handling Lua Filter")
    print("---")
    lua_filter_file = "latex-to-unicode.lua" # This filter improves MathML rendering
    if Path(lua_filter_file).is_file():
        pandoc_command.extend(["--lua-filter", lua_filter_file])
        print(f"    Lua filter '{lua_filter_file}' found. Enabling it for improved Unicode math handling.")
    else:
        print(f"    Lua filter '{lua_filter_file}' not found. Continuing without it.")
        print("    Download this filter from https://raw.githubusercontent.com/jgm/pandoc-lua-filters/master/latex-to-unicode/latex-to-unicode.lua")
        print("    and place it in the same directory as this script for improved formula conversion.")

    # ----------------------------------------------------------
    # 6. Execute Pandoc
    # ----------------------------------------------------------
    print("\n---")
    print("[SECTION 6] Executing Pandoc Conversion")
    print("---")
    print(f"    Full Pandoc command: {' '.join(pandoc_command)}") # Print the entire command
    try:
        # Capture stdout and stderr for better error reporting
        result = subprocess.run(pandoc_command, check=True, capture_output=True, text=True, encoding='utf-8')
        print(f"✅ Conversion complete: {target_file}")
        if result.stdout:
            print("\nPandoc STDOUT (Informational messages):")
            print(result.stdout)
        if result.stderr:
            print("\nPandoc STDERR (Warnings/Errors from Pandoc itself):")
            print(result.stderr)

    except subprocess.CalledProcessError as e:
        print("❌ Pandoc conversion failed.", file=sys.stderr)
        print(f"    Error details: {e}", file=sys.stderr)
        if e.stdout:
            print(f"\nPandoc STDOUT (Partial output):\n{e.stdout}", file=sys.stderr)
        if e.stderr:
            print(f"\nPandoc STDERR (Errors):\n{e.stderr}", file=sys.stderr)
        sys.exit(e.returncode)
    except FileNotFoundError:
        print(f"❌ Error: 'pandoc' command not found. Please ensure Pandoc is installed and in your system's PATH.", file=sys.stderr)
        print("    Download Pandoc from https://pandoc.org/installing.html", file=sys.stderr)
        sys.exit(1)


    print(f"╚══════════════════════════════════════════════════╝")
    print(f"║        LaTeX to {output_format.upper()} Conversion Process Finished ║")
    print(f"╚══════════════════════════════════════════════════╝")

# ----------------------------------------------------------------------
#  Main Program
#  Description:   Sets up input/output files and calls the conversion function.
# ----------------------------------------------------------------------
if __name__ == "__main__":
    print("╔══════════════════════════════════════════════════╗")
    print("║          LaTeX Document Converter                  ║")
    print("║          Main Program Started                      ║")
    print("╚══════════════════════════════════════════════════╝")

    # ----------------------------------------------------------
    # 1. User Input (File Paths & Output Format)
    # ----------------------------------------------------------
    print("\n---")
    print("[SECTION 1] User Input: Define File Paths & Output Format")
    print("---")
    # ----------------------------------------------------------
    #   User Input Section - IMPORTANT: Adjust these paths and options for your project
    # ----------------------------------------------------------
    SOURCE_FILE = "00 Main Holdings.tex"          # 📝 Input LaTeX file

    # --- OUTPUT SETTINGS ---
    # Choose "epub" or "docx"
    OUTPUT_FORMAT = "epub"                        # 🎯 Desired output format: "epub" or "docx"
    TARGET_BASE_NAME = "your_ebook"               # 📂 Base name for the output file (e.g., "my_book"). Extension will be added.

    # --- BIBLIOGRAPHY SETTINGS ---
    BIBLIOGRAPHY_FILE = "Bibliography.bib"        # 📚 Bibliography file (or None if not used)
    CSL_FILE = "chicago-library-list.csl"         # 📚 CSL file for citation style (e.g., "ieee.csl", or None for default)

    # --- EPUB SPECIFIC SETTINGS (ignored for DOCX) ---
    EPUB_METADATA_FILE = "metadata.xml"           # 📄 EPUB metadata XML file (will be created if not exists)
    EPUB_COVER_IMAGE_FILE = "Your_cover_picture.jpg" # 🖼️ Path to your cover image (e.g., "cover.png"). Set to None if no cover.
    EPUB_CUSTOM_CSS_FILE = "style.css"            # 🎨 Custom CSS file for styling (e.g., hyphenation). Set to None if not used.

    # --- DOCX SPECIFIC SETTINGS (ignored for EPUB) ---
    DOCX_REFERENCE_DOC_FILE = None                # 📋 Path to a reference DOCX for styling. Set to None for Pandoc's defaults.
                                                  #    Example: "my_template.docx"
    # ----------------------------------------------------------
    # End User Input Section
    # ----------------------------------------------------------

    print("    Please review and modify the settings above if necessary:")
    print(f"    - LaTeX Source File:       {SOURCE_FILE}")
    print(f"    - Output Format:           {OUTPUT_FORMAT.upper()}")
    print(f"    - Output Base Name:        {TARGET_BASE_NAME}")
    print(f"    - Bibliography File:       {BIBLIOGRAPHY_FILE if BIBLIOGRAPHY_FILE else 'None'}")
    print(f"    - CSL Style File:          {CSL_FILE if CSL_FILE else 'None'}")

    if OUTPUT_FORMAT == "epub":
        print(f"    [EPUB Settings]")
        print(f"    - EPUB Metadata File:      {EPUB_METADATA_FILE if EPUB_METADATA_FILE else 'None'}")
        print(f"    - EPUB Cover Image:        {EPUB_COVER_IMAGE_FILE if EPUB_COVER_IMAGE_FILE else 'None'}")
        print(f"    - EPUB Custom CSS:         {EPUB_CUSTOM_CSS_FILE if EPUB_CUSTOM_CSS_FILE else 'None'}")
    elif OUTPUT_FORMAT == "docx":
        print(f"    [DOCX Settings]")
        print(f"    - DOCX Reference Doc:      {DOCX_REFERENCE_DOC_FILE if DOCX_REFERENCE_DOC_FILE else 'None'}")


    # ----------------------------------------------------------
    # 2. Create EPUB Metadata File (if needed for EPUB output)
    # ----------------------------------------------------------
    print("\n---")
    print("[SECTION 2] Creating EPUB Metadata File (if needed and EPUB output)")
    print("---")
    if OUTPUT_FORMAT == "epub" and EPUB_METADATA_FILE and not Path(EPUB_METADATA_FILE).is_file():
        print(f"    Metadata file '{EPUB_METADATA_FILE}' not found. Creating a basic one.")
        try:
            # Generate a new UUID for the book ID
            book_uuid = uuid.uuid4()
            # Get current date in ISO-MM-DD format
            current_date = datetime.now().strftime("%Y-%m-%d")

            with open(EPUB_METADATA_FILE, "w", encoding="UTF-8") as f:
                f.write(f"""<?xml version="1.0" encoding="UTF-8"?>
<package xmlns="http://www.idpf.org/2007/opf" version="3.0" xml:lang="en">
  <metadata xmlns:dc="http://purl.org/dc/elements/1.1/">
    <dc:title>Your Book Title</dc:title>
    <dc:creator>Your Name</dc:creator>
    <dc:publisher>Your Publisher</dc:publisher>
    <dc:date>{current_date}</dc:date>
    <dc:language>en</dc:language>
    <dc:identifier id="BookId" scheme="UUID">urn:uuid:{book_uuid}</dc:identifier>
  </metadata>
  <manifest>
    <item id="nav" href="nav.xhtml" properties="nav" media-type="application/xhtml+xml"/>
  </manifest>
  <spine toc="nav"/>
</package>
""")
            print(f"    A basic metadata file has been created at '{EPUB_METADATA_FILE}'.")
            print("    Please edit this file to add the correct title, author, publisher, etc. for your book.")
            print(f"    A unique UUID has been generated: urn:uuid:{book_uuid}")
        except IOError as e:
            print(f"❌ Error: Could not create metadata file '{EPUB_METADATA_FILE}': {e}", file=sys.stderr)
            sys.exit(1)
    elif OUTPUT_FORMAT == "epub" and EPUB_METADATA_FILE:
        print(f"    Metadata file '{EPUB_METADATA_FILE}' already exists.")
        print("    Ensure the title, author, and UUID within it are correct for your book.")
    elif OUTPUT_FORMAT == "docx":
        print("    Metadata file creation skipped for DOCX output.")

    # ----------------------------------------------------------
    # 3. Check for Lua Filter (Optional, but recommended for Math)
    # ----------------------------------------------------------
    print("\n---")
    print("[SECTION 3] Checking for Lua Filter")
    print("---")
    lua_filter_file = "latex-to-unicode.lua" # This filter improves MathML rendering
    if not Path(lua_filter_file).is_file():
        print(f"    Lua filter '{lua_filter_file}' not found.")
        print("    Download this filter from https://raw.githubusercontent.com/jgm/pandoc-lua-filters/master/latex-to-unicode/latex-to-unicode.lua")
        print("    and place it in the same directory as this script for improved formula conversion.")
    else:
        print(f"    Lua filter '{lua_filter_file}' already exists.")

    # ----------------------------------------------------------
    # 4. Perform Conversion
    # ----------------------------------------------------------
    print("\n---")
    print(f"[SECTION 4] Performing LaTeX to {OUTPUT_FORMAT.upper()} Conversion")
    print("---")
    convert_latex_document(
        SOURCE_FILE,
        OUTPUT_FORMAT,
        TARGET_BASE_NAME,
        BIBLIOGRAPHY_FILE,
        CSL_FILE,
        EPUB_METADATA_FILE,
        EPUB_COVER_IMAGE_FILE,
        EPUB_CUSTOM_CSS_FILE,
        DOCX_REFERENCE_DOC_FILE
    )

    print("╚══════════════════════════════════════════════════╝")
    print("║          Main Program Finished                     ║")
    print("╚══════════════════════════════════════════════════╝")
